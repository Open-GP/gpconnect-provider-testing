// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GPConnect.Provider.AcceptanceTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AppointmentRetrieve")]
    [NUnit.Framework.CategoryAttribute("appointment")]
    public partial class AppointmentRetrieveFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AppointmentRetrieve.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AppointmentRetrieve", null, ProgrammingLanguage.CSharp, new string[] {
                        "appointment"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve success valid id where appointment resource returned is not " +
            "required")]
        public virtual void AppointmentRetrieveSuccessValidIdWhereAppointmentResourceReturnedIsNotRequired()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve success valid id where appointment resource returned is not " +
                    "required", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given("I get the Patient for Patient Value \"patient15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
  testRunner.And("I store the Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
  testRunner.And("the response should be a Bundle resource of type \"searchset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
  testRunner.And("the Bundle should contain no Appointments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve success valid id where single appointment resource should be" +
            " returned")]
        [NUnit.Framework.TestCaseAttribute("patient1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("patient2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("patient3", new string[0])]
        public virtual void AppointmentRetrieveSuccessValidIdWhereSingleAppointmentResourceShouldBeReturned(string patient, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve success valid id where single appointment resource should be" +
                    " returned", exampleTags);
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given(string.Format("I create an Appointment for Patient \"{0}\" and Organization Code \"ORG1\"", patient), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.Given(string.Format("I get the Patient for Patient Value \"{0}\"", patient), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
  testRunner.And("I store the Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 22
  testRunner.And("the response should be a Bundle resource of type \"searchset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
  testRunner.And("the Bundle should contain a minimum of \"1\" Appointments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve multiple appointment retrived")]
        [NUnit.Framework.TestCaseAttribute("patient4", "2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("patient5", "4", new string[0])]
        [NUnit.Framework.TestCaseAttribute("patient6", "3", new string[0])]
        public virtual void AppointmentRetrieveMultipleAppointmentRetrived(string patient, string numberOfAppointments, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve multiple appointment retrived", exampleTags);
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given(string.Format("I create \"{0}\" Appointments for Patient \"{1}\" and Organization Code \"ORG1\"", numberOfAppointments, patient), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.Given(string.Format("I get the Patient for Patient Value \"{0}\"", patient), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
  testRunner.And("I store the Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 35
   testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
  testRunner.And("the response should be a Bundle resource of type \"searchset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
  testRunner.And(string.Format("the Bundle should contain a minimum of \"{0}\" Appointments", numberOfAppointments), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve fail due to invalid patient logical id")]
        [NUnit.Framework.TestCaseAttribute("null", new string[0])]
        [NUnit.Framework.TestCaseAttribute("dd", new string[0])]
        public virtual void AppointmentRetrieveFailDueToInvalidPatientLogicalId(string id, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve fail due to invalid patient logical id", exampleTags);
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 48
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
  testRunner.And(string.Format("I set the request URL to \"/fhir/Patient/{0}/Appointment\"", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.Then("the response status code should be \"404\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 53
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
  testRunner.And("the response should be a OperationOutcome resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve fail due to unexpected identifier in request")]
        [NUnit.Framework.TestCaseAttribute("", new string[0])]
        [NUnit.Framework.TestCaseAttribute("**", new string[0])]
        public virtual void AppointmentRetrieveFailDueToUnexpectedIdentifierInRequest(string id, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve fail due to unexpected identifier in request", exampleTags);
#line 60
this.ScenarioSetup(scenarioInfo);
#line 61
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 62
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 63
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
  testRunner.And(string.Format("I set the request URL to \"/fhir/Patient/{0}/Appointment\"", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.Then("the response status code should be \"404\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
  testRunner.And("the response should be a OperationOutcome resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve send request with date variations which are invalid")]
        [NUnit.Framework.TestCaseAttribute("16-02-2016", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("16/02/2016", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("99-99-99999", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("99999", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("201", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-14", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-08T09:22:16", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-08T23:59:59+00:00", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-05T08:16", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-08-", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-08-05 08:16:07", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("16-02-2016", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("16/02/2016", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("99-99-99999", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("99999", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("201", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-14", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-08T09:22:16", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-08T23:59:59+00:00", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-05T08:16", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-08-", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-08-05 08:16:07", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("16-02-2016", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("16/02/2016", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("99-99-99999", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("99999", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("201", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-14", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-08T09:22:16", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-08T23:59:59+00:00", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-05T08:16", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-08-", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-08-05 08:16:07", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("16-02-2016", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("16/02/2016", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("99-99-99999", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("99999", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("201", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-14", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-08T09:22:16", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-08T23:59:59+00:00", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-05T08:16", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-08-", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-08-05 08:16:07", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("16-02-2016", "eq", new string[0])]
        [NUnit.Framework.TestCaseAttribute("16/02/2016", "eq", new string[0])]
        [NUnit.Framework.TestCaseAttribute("99-99-99999", "eq", new string[0])]
        [NUnit.Framework.TestCaseAttribute("99999", "eq", new string[0])]
        [NUnit.Framework.TestCaseAttribute("201", "eq", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13", "eq", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-14", "eq", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-08T09:22:16", "eq", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-08T23:59:59+00:00", "eq", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-13-05T08:16", "eq", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-08-", "eq", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-08-05 08:16:07", "eq", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044", "ne", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-02", "ne", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-10-05", "ne", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-05", "ne", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-05-01T11:08:32", "ne", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-10-23T11:08:32+00:00", "ne", new string[0])]
        public virtual void AppointmentRetrieveSendRequestWithDateVariationsWhichAreInvalid(string startDate, string prefix, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve send request with date variations which are invalid", exampleTags);
#line 74
this.ScenarioSetup(scenarioInfo);
#line 75
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 76
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 77
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
  testRunner.And(string.Format("I add a query parameter to the Request URL with Prefix \"{0}\" for Start \"{1}\"", prefix, startDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
 testRunner.Then("the response status code should indicate failure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 81
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
  testRunner.And("the response should be a OperationOutcome resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve send request and find request using equal to prefix")]
        [NUnit.Framework.TestCaseAttribute("eq", new string[0])]
        [NUnit.Framework.TestCaseAttribute("", new string[0])]
        public virtual void AppointmentRetrieveSendRequestAndFindRequestUsingEqualToPrefix(string prefix, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve send request and find request using equal to prefix", exampleTags);
#line 153
this.ScenarioSetup(scenarioInfo);
#line 154
 testRunner.Given("I create \"1\" Appointments for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 155
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 156
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
  testRunner.And(string.Format("I add a query parameter to the Request URL with Prefix \"{0}\" for the Created Appo" +
                        "intment Start", prefix), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 159
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 160
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 161
  testRunner.And("the response should be a Bundle resource of type \"searchset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 162
  testRunner.And("the Bundle should contain a minimum of \"1\" Appointments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
  testRunner.And("the Appointment Start should equal the Created Appointment Start", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
  testRunner.And("the Appointment Start and End Dates should equal the Created Appointment Start an" +
                    "d End Dates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 165
  testRunner.And("the Appointment Participants should be equal to the Created Appointment Participa" +
                    "nts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve send request with date variations and greater than and less " +
            "than prefix")]
        [NUnit.Framework.TestCaseAttribute("2014", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-02", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-10-05", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-08-05T08:16", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05-01T11:08:32", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015-10-23T11:08:32+00:00", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-02", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-10-05", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-05", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-08-05T08:16", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-05-01T11:08:32", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-10-23T11:08:32+00:00", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-02", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-10-05", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2016-08-05T08:16", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05-01T11:08:32", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015-10-23T11:08:32+00:00", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-02", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-10-05", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-05", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-08-05T08:16", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-05-01T11:08:32", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-10-23T11:08:32+00:00", "le", new string[0])]
        public virtual void AppointmentRetrieveSendRequestWithDateVariationsAndGreaterThanAndLessThanPrefix(string startDate, string prefix, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve send request with date variations and greater than and less " +
                    "than prefix", exampleTags);
#line 171
this.ScenarioSetup(scenarioInfo);
#line 172
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 173
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 174
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 175
  testRunner.And(string.Format("I add a query parameter to the Request URL with Prefix \"{0}\" for Start \"{1}\"", prefix, startDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 177
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 178
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
  testRunner.And("the response should be a Bundle resource of type \"searchset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 180
  testRunner.And("the Bundle should contain a minimum of \"1\" Appointments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve send request with lower start date boundry and start prefix " +
            "and upper end date boundary and end prefix")]
        [NUnit.Framework.TestCaseAttribute("2015", "gt", "2018", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-02", "gt", "2018-07", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-10-05", "gt", "2018-10-05", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05", "gt", "2044-05-01T11:08:32", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05-01T11:08:32", "gt", "2018-05", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015-10-23T11:08:32+00:00", "gt", "2018-10-23T11:08:32+00:00", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014", "ge", "2044", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-02", "ge", "2044-02", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-10-05", "ge", "2044-10-05", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05", "ge", "2044-05", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05-01T11:08:32", "ge", "2044-05-01T11:08:32", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015-10-23T11:08:32+00:00", "ge", "2044-10-23T11:08:32+00:00", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014", "gt", "2044", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-02", "gt", "2044-02", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-10-05", "gt", "2044-10-05", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05", "gt", "2044-05", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05-01T11:08:32", "gt", "2044-05-01T11:08:32", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015-10-23T11:08:32+00:00", "gt", "2044-10-23T11:08:32+00:00", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014", "ge", "2044", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-02", "ge", "2044-02", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-10-05", "ge", "2044-10-05", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05", "ge", "2044-05", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05-01T11:08:32", "ge", "2044-05-01T11:08:32", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015-10-23T11:08:32+00:00", "ge", "2044-10-23T11:08:32+00:00", "lt", new string[0])]
        public virtual void AppointmentRetrieveSendRequestWithLowerStartDateBoundryAndStartPrefixAndUpperEndDateBoundaryAndEndPrefix(string startDate, string prefix, string endDate, string prefix2, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve send request with lower start date boundry and start prefix " +
                    "and upper end date boundary and end prefix", exampleTags);
#line 216
this.ScenarioSetup(scenarioInfo);
#line 217
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 218
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 219
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 220
  testRunner.And(string.Format("I add a query parameter to the Request URL with Prefix \"{0}\" for Start \"{1}\" and " +
                        "Prefix \"{2}\" for End \"{3}\"", prefix, startDate, prefix2, endDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 222
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 223
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
  testRunner.And("the response should be a Bundle resource of type \"searchset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 225
  testRunner.And("the Bundle should contain a minimum of \"1\" Appointments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve send request with upper end date boundary and end prefix and" +
            " lower start date boundry and start prefix")]
        [NUnit.Framework.TestCaseAttribute("2018", "lt", "2015", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2018-07", "lt", "2014-02", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2018-10-05", "lt", "2014-10-05", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-05-01T11:08:32", "lt", "2014-05", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2018-05", "lt", "2014-05-01T11:08:32", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2018-10-23T11:08:32+00:00", "lt", "2015-10-23T11:08:32+00:00", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044", "le", "2014", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-02", "le", "2014-02", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-10-05", "le", "2014-10-05", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-05", "le", "2014-05", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-05-01T11:08:32", "le", "2014-05-01T11:08:32", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-10-23T11:08:32+00:00", "le", "2015-10-23T11:08:32+00:00", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044", "le", "2014", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-02", "le", "2014-02", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-10-05", "le", "2014-10-05", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-05", "le", "2014-05", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-05-01T11:08:32", "le", "2014-05-01T11:08:32", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-10-23T11:08:32+00:00", "le", "2015-10-23T11:08:32+00:00", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044", "lt", "2014", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-02", "lt", "2014-02", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-10-05", "lt", "2014-10-05", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-05", "lt", "2014-05", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2044-05-01T11:08:32", "lt", "2014-05-01T11:08:32", "ge", new string[0])]
        public virtual void AppointmentRetrieveSendRequestWithUpperEndDateBoundaryAndEndPrefixAndLowerStartDateBoundryAndStartPrefix(string startDate, string prefix, string endDate, string prefix2, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve send request with upper end date boundary and end prefix and" +
                    " lower start date boundry and start prefix", exampleTags);
#line 253
this.ScenarioSetup(scenarioInfo);
#line 254
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 255
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 256
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 257
  testRunner.And(string.Format("I add a query parameter to the Request URL with Prefix \"{0}\" for Start \"{1}\" and " +
                        "Prefix \"{2}\" for End \"{3}\"", prefix, startDate, prefix2, endDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 258
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 259
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 260
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 261
  testRunner.And("the response should be a Bundle resource of type \"searchset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 262
  testRunner.And("the Bundle should contain a minimum of \"1\" Appointments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve send request with different upper end date boundary formats " +
            "and end prefix and different lower start date boundry formats and start prefix")]
        [NUnit.Framework.TestCaseAttribute("2015", "gt", "2018", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015", "gt", "2018-07", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015", "gt", "2018-10-05", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015", "gt", "2044-05-01T11:08:32", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015", "gt", "2018-05", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015", "gt", "2018-10-23T11:08:32+00:00", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-02", "gt", "2018", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-02", "gt", "2018-07", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-02", "gt", "2018-10-05", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-02", "gt", "2044-05-01T11:08:32", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-02", "gt", "2018-05", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-02", "gt", "2018-10-23T11:08:32+00:00", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-10-05", "gt", "2018", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-10-05", "gt", "2018-07", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-10-05", "gt", "2018-10-05", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-10-05", "gt", "2044-05-01T11:08:32", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-10-05", "gt", "2018-05", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-10-05", "gt", "2018-10-23T11:08:32+00:00", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05-01T11:08:32", "gt", "2018", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05-01T11:08:32", "gt", "2018-07", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05-01T11:08:32", "gt", "2018-10-05", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05-01T11:08:32", "gt", "2044-05-01T11:08:32", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05-01T11:08:32", "gt", "2018-05", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05-01T11:08:32", "gt", "2018-10-23T11:08:32+00:00", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015-10-23T11:08:32+00:00", "gt", "2018", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015-10-23T11:08:32+00:00", "gt", "2018-07", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015-10-23T11:08:32+00:00", "gt", "2018-10-05", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015-10-23T11:08:32+00:00", "gt", "2044-05-01T11:08:32", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015-10-23T11:08:32+00:00", "gt", "2018-05", "lt", new string[0])]
        public virtual void AppointmentRetrieveSendRequestWithDifferentUpperEndDateBoundaryFormatsAndEndPrefixAndDifferentLowerStartDateBoundryFormatsAndStartPrefix(string startDate, string prefix, string endDate, string prefix2, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve send request with different upper end date boundary formats " +
                    "and end prefix and different lower start date boundry formats and start prefix", exampleTags);
#line 291
this.ScenarioSetup(scenarioInfo);
#line 292
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 293
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 294
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 295
  testRunner.And(string.Format("I add a query parameter to the Request URL with Prefix \"{0}\" for Start \"{1}\" and " +
                        "Prefix \"{2}\" for End \"{3}\"", prefix, startDate, prefix2, endDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 296
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 297
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 298
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 299
  testRunner.And("the response should be a Bundle resource of type \"searchset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 300
  testRunner.And("the Bundle should contain a minimum of \"1\" Appointments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve send request with start date and invalid start prefix and en" +
            "d date and invalid end prefix")]
        [NUnit.Framework.TestCaseAttribute("2015", "lf", "2018", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-02", "lt", "2018-07", "l2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-10-05", "g1", "2018-10-05", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05", "gt", "2044-05-01T11:08:32", "g", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05-01T11:08:32", "tt", "2018-05", "lu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015-10-23T11:08:32+00:00", "dd", "2018-10-23T11:08:32+00:00", "zz", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014", "gt", "2044", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-02", "gt", "2044-02", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-10-05", "gt", "2044-10-05", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05", "gt", "2044-05", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05-01T11:08:32", "gt", "2044-05-01T11:08:32", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015-10-23T11:08:32+00:00", "gt", "2044-10-23T11:08:32+00:00", "gt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014", "ge", "2044", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-02", "ge", "2044-02", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-10-05", "ge", "2044-10-05", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05", "ge", "2044-05", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05-01T11:08:32", "ge", "2044-05-01T11:08:32", "ge", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014", "lt", "2044", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-02", "lt", "2044-02", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-10-05", "lt", "2044-10-05", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05", "lt", "2044-05", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05-01T11:08:32", "lt", "2044-05-01T11:08:32", "lt", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014", "le", "2044", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-02", "le", "2044-02", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-10-05", "le", "2044-10-05", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05", "le", "2044-05", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2014-05-01T11:08:32", "le", "2044-05-01T11:08:32", "le", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2015-10-23T11:08:32+00:00", "le", "2044-10-23T11:08:32+00:00", "le", new string[0])]
        public virtual void AppointmentRetrieveSendRequestWithStartDateAndInvalidStartPrefixAndEndDateAndInvalidEndPrefix(string startDate, string prefix, string endDate, string prefix2, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve send request with start date and invalid start prefix and en" +
                    "d date and invalid end prefix", exampleTags);
#line 334
this.ScenarioSetup(scenarioInfo);
#line 335
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 336
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 337
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 338
  testRunner.And(string.Format("I add a query parameter to the Request URL with Prefix \"{0}\" for Start \"{1}\" and " +
                        "Prefix \"{2}\" for End \"{3}\"", prefix, startDate, prefix2, endDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 339
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 340
 testRunner.Then("the response status code should indicate failure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 341
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 342
  testRunner.And("the response should be a OperationOutcome resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve failure due to missing header")]
        [NUnit.Framework.TestCaseAttribute("Ssp-TraceID", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Ssp-From", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Ssp-To", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Ssp-InteractionId", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Authorization", new string[0])]
        public virtual void AppointmentRetrieveFailureDueToMissingHeader(string header, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve failure due to missing header", exampleTags);
#line 374
this.ScenarioSetup(scenarioInfo);
#line 375
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 376
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 377
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 378
 testRunner.When(string.Format("I make the \"AppointmentSearch\" request with missing Header \"{0}\"", header), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 379
 testRunner.Then("the response status code should be \"400\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 380
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 381
  testRunner.And("the response should be a OperationOutcome resource with error code \"BAD_REQUEST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve interaction id incorrect fail")]
        [NUnit.Framework.TestCaseAttribute("urn:nhs:names:services:gpconnect:fhir:rest:search:organization", new string[0])]
        [NUnit.Framework.TestCaseAttribute("urn:nh4s:names:se34rv4ices4:gpconnect3:fhir:re23st:seawwwwwwwww", new string[0])]
        [NUnit.Framework.TestCaseAttribute("urn:nhs:namezzs:services:gpconnect:fhir:operation:gpc.getcarerecord", new string[0])]
        [NUnit.Framework.TestCaseAttribute("", new string[0])]
        [NUnit.Framework.TestCaseAttribute("null", new string[0])]
        public virtual void AppointmentRetrieveInteractionIdIncorrectFail(string interactionId, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve interaction id incorrect fail", exampleTags);
#line 390
this.ScenarioSetup(scenarioInfo);
#line 391
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 392
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 393
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 394
  testRunner.And(string.Format("I set the Interaction Id header to \"{0}\"", interactionId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 395
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 396
 testRunner.Then("the response status code should be \"400\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 397
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 398
  testRunner.And("the response should be a OperationOutcome resource with error code \"BAD_REQUEST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve accept header and _format parameter to request response form" +
            "at")]
        [NUnit.Framework.TestCaseAttribute("application/json+fhir", "application/json+fhir", "JSON", new string[0])]
        [NUnit.Framework.TestCaseAttribute("application/json+fhir", "application/xml+fhir", "XML", new string[0])]
        [NUnit.Framework.TestCaseAttribute("application/xml+fhir", "application/json+fhir", "JSON", new string[0])]
        [NUnit.Framework.TestCaseAttribute("application/xml+fhir", "application/xml+fhir", "XML", new string[0])]
        public virtual void AppointmentRetrieveAcceptHeaderAnd_FormatParameterToRequestResponseFormat(string header, string parameter, string bodyFormat, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve accept header and _format parameter to request response form" +
                    "at", exampleTags);
#line 407
this.ScenarioSetup(scenarioInfo);
#line 408
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 409
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 410
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 411
  testRunner.And(string.Format("I set the Accept header to \"{0}\"", header), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 412
  testRunner.And(string.Format("I add the parameter \"_format\" with the value \"{0}\"", parameter), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 413
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 414
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 415
  testRunner.And(string.Format("the response body should be FHIR {0}", bodyFormat), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 416
  testRunner.And("the response should be a Bundle resource of type \"searchset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 417
  testRunner.And("the Bundle should contain a minimum of \"1\" Appointments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve accept header to request response format")]
        [NUnit.Framework.TestCaseAttribute("application/json+fhir", "JSON", new string[0])]
        [NUnit.Framework.TestCaseAttribute("application/xml+fhir", "XML", new string[0])]
        public virtual void AppointmentRetrieveAcceptHeaderToRequestResponseFormat(string header, string bodyFormat, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve accept header to request response format", exampleTags);
#line 425
this.ScenarioSetup(scenarioInfo);
#line 426
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 427
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 428
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 429
  testRunner.And(string.Format("I set the Accept header to \"{0}\"", header), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 430
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 431
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 432
  testRunner.And(string.Format("the response body should be FHIR {0}", bodyFormat), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 433
  testRunner.And("the response should be a Bundle resource of type \"searchset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 434
  testRunner.And("the Bundle should contain a minimum of \"1\" Appointments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve _format parameter only to request response format")]
        [NUnit.Framework.TestCaseAttribute("application/json+fhir", "JSON", new string[0])]
        [NUnit.Framework.TestCaseAttribute("application/xml+fhir", "XML", new string[0])]
        public virtual void AppointmentRetrieve_FormatParameterOnlyToRequestResponseFormat(string parameter, string bodyFormat, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve _format parameter only to request response format", exampleTags);
#line 440
this.ScenarioSetup(scenarioInfo);
#line 441
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 442
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 443
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 444
  testRunner.And(string.Format("I add the parameter \"_format\" with the value \"{0}\"", parameter), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 445
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 446
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 447
  testRunner.And(string.Format("the response body should be FHIR {0}", bodyFormat), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 448
  testRunner.And("the response should be a Bundle resource of type \"searchset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 449
  testRunner.And("the Bundle should contain a minimum of \"1\" Appointments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve appointment which contains all mandatory resources")]
        public virtual void AppointmentRetrieveAppointmentWhichContainsAllMandatoryResources()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve appointment which contains all mandatory resources", ((string[])(null)));
#line 455
this.ScenarioSetup(scenarioInfo);
#line 456
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 457
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 458
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 459
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 460
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 461
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 462
  testRunner.And("the response should be a Bundle resource of type \"searchset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 463
  testRunner.And("the Appointment Status should be valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 464
  testRunner.And("the Appointment Start should be valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 465
  testRunner.And("the Appointment End should be valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 466
  testRunner.And("the Appointment Slots should be valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 467
  testRunner.And("the Appointment Participants should be valid and resolvable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 468
  testRunner.And("the Appointment Description must be valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 469
  testRunner.And("the Appointment Created must be valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve bundle resource must contain participant with actor present")]
        public virtual void AppointmentRetrieveBundleResourceMustContainParticipantWithActorPresent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve bundle resource must contain participant with actor present", ((string[])(null)));
#line 471
this.ScenarioSetup(scenarioInfo);
#line 472
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 473
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 474
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 475
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 476
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 477
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 478
  testRunner.And("the response should be a Bundle resource of type \"searchset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 479
  testRunner.And("the Appointment Participant Type and Actor should be valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve bundle valid resources returned in the response")]
        public virtual void AppointmentRetrieveBundleValidResourcesReturnedInTheResponse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve bundle valid resources returned in the response", ((string[])(null)));
#line 481
this.ScenarioSetup(scenarioInfo);
#line 482
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 483
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 484
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 485
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 486
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 487
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 488
  testRunner.And("the Appointment Participants should be valid and resolvable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve bundle contains appointment with identifer with correct syst" +
            "em and value")]
        public virtual void AppointmentRetrieveBundleContainsAppointmentWithIdentiferWithCorrectSystemAndValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve bundle contains appointment with identifer with correct syst" +
                    "em and value", ((string[])(null)));
#line 490
this.ScenarioSetup(scenarioInfo);
#line 491
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 492
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 493
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 494
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 495
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 496
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 497
  testRunner.And("the Appointment Identifiers should be valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve appointment response should contain meta data profile and ve" +
            "rsion id")]
        public virtual void AppointmentRetrieveAppointmentResponseShouldContainMetaDataProfileAndVersionId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve appointment response should contain meta data profile and ve" +
                    "rsion id", ((string[])(null)));
#line 499
this.ScenarioSetup(scenarioInfo);
#line 500
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 501
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 502
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 503
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 504
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 505
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 506
  testRunner.And("the Appointment Metadata should be valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve bundle contains valid start and end dates")]
        public virtual void AppointmentRetrieveBundleContainsValidStartAndEndDates()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve bundle contains valid start and end dates", ((string[])(null)));
#line 508
this.ScenarioSetup(scenarioInfo);
#line 509
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 510
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 511
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 512
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 513
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 514
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 515
  testRunner.And("the Appointment Start should be valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 516
  testRunner.And("the Appointment End should be valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve JWT patient type request invalid")]
        [NUnit.Framework.TestCaseAttribute("organization/*.read", new string[0])]
        [NUnit.Framework.TestCaseAttribute("organization/*.write", new string[0])]
        [NUnit.Framework.TestCaseAttribute("patient/*.write", new string[0])]
        public virtual void AppointmentRetrieveJWTPatientTypeRequestInvalid(string jWTType, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve JWT patient type request invalid", exampleTags);
#line 518
this.ScenarioSetup(scenarioInfo);
#line 519
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 520
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 521
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 522
  testRunner.And(string.Format("I set the JWT requested scope to \"{0}\"", jWTType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 523
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 524
 testRunner.Then("the response status code should be \"400\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 525
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 526
  testRunner.And("the response should be a OperationOutcome resource with error code \"BAD_REQUEST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve JWT patient reference must match payload patient nhs number")]
        public virtual void AppointmentRetrieveJWTPatientReferenceMustMatchPayloadPatientNhsNumber()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve JWT patient reference must match payload patient nhs number", ((string[])(null)));
#line 533
this.ScenarioSetup(scenarioInfo);
#line 534
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 535
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 536
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 537
  testRunner.And("I set the JWT requested record NHS number to config patient \"patient2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 538
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 539
 testRunner.Then("the response status code should be \"400\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 540
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 541
  testRunner.And("the response should be a OperationOutcome resource with error code \"BAD_REQUEST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve sending additional valid parameters in the request")]
        public virtual void AppointmentRetrieveSendingAdditionalValidParametersInTheRequest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve sending additional valid parameters in the request", ((string[])(null)));
#line 543
this.ScenarioSetup(scenarioInfo);
#line 544
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 545
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 546
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 547
  testRunner.And("I add the parameter \"_count\" with the value \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 548
  testRunner.And("I add the parameter \"_sort\" with the value \"date\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 549
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 550
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 551
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 552
  testRunner.And("the response should be a Bundle resource of type \"searchset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Conformance profile supports the search appointment operation")]
        public virtual void ConformanceProfileSupportsTheSearchAppointmentOperation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Conformance profile supports the search appointment operation", ((string[])(null)));
#line 554
this.ScenarioSetup(scenarioInfo);
#line 555
 testRunner.Given("I configure the default \"MetadataRead\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 556
 testRunner.When("I make the \"MetadataRead\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 557
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 558
  testRunner.And("the Conformance REST Resources should contain the \"Appointment\" Resource with the" +
                    " \"SearchType\" Interaction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve valid response check caching headers exist")]
        public virtual void AppointmentRetrieveValidResponseCheckCachingHeadersExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve valid response check caching headers exist", ((string[])(null)));
#line 560
this.ScenarioSetup(scenarioInfo);
#line 561
testRunner.Given("I get the Patient for Patient Value \"patient15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 562
  testRunner.And("I store the Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 563
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 564
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 565
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 566
 testRunner.Then("the response status code should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 567
  testRunner.And("the response should be a Bundle resource of type \"searchset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 568
  testRunner.And("the Bundle should contain no Appointments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 569
  testRunner.And("the required cacheing headers should be present in the response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appointment retrieve invalid response check caching headers exist")]
        public virtual void AppointmentRetrieveInvalidResponseCheckCachingHeadersExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appointment retrieve invalid response check caching headers exist", ((string[])(null)));
#line 571
this.ScenarioSetup(scenarioInfo);
#line 572
 testRunner.Given("I create an Appointment for Patient \"patient1\" and Organization Code \"ORG1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 573
 testRunner.Given("I configure the default \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 574
  testRunner.And("I set the JWT Requested Record to the NHS Number of the Stored Patient", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 575
  testRunner.And("I set the Interaction Id header to \"urn:nhs:names:services:gpconnect:fhir:rest:se" +
                    "arch:organization \"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 576
 testRunner.When("I make the \"AppointmentSearch\" request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 577
 testRunner.Then("the response status code should be \"400\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 578
  testRunner.And("the response body should be FHIR JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 579
  testRunner.And("the response should be a OperationOutcome resource with error code \"BAD_REQUEST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 580
  testRunner.And("the required cacheing headers should be present in the response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
